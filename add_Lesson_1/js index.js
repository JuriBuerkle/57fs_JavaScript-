//  Типы данных
// в JavaScript есть 7 основных типов данных:
// 1. Строки (String) - это последовательность символов, заключенных в кавычки
//    Строки могут быть заключены в одинарные (' '), двойные (" ") или обратные кавычки (` `)
//    Обратные кавычки позволяют использовать шаблонные строки, которые могут содержать выражения
//    и многострочные строки.

// 2. Числа (Number) - это числовые значения, которые могут быть целыми или с плавающей точкой
//    Числа в JavaScript представлены в формате IEEE 754, что позволяет работать с большими и малыми числами.
//    Числа могут быть представлены в десятичной, шестнадцатеричной и двоичной системах счисления.
//    В JavaScript также есть тип данных BigInt, который позволяет работать с большими целыми числами.

// 3. Логические значения (Boolean) - это значения true или false
//    Логические значения используются для управления потоком выполнения программы, например, в условных операторах.

// 4. Неопределенное значение (Undefined) - это значение, которое означает, что переменная не была инициализирована
//    Если переменная объявлена, но не инициализирована, то ее значение будет undefined.

// 5. Нулевое значение (Null) - это значение, которое означает, что переменная была инициализирована, но не содержит значения
//    Null используется для обозначения отсутствия значения, например, когда переменная должна быть инициализирована,
//    но в данный момент не содержит никакого значения.

// 6. Объекты (Object) - это сложные структуры данных, которые могут содержать свойства и методы
//    Объекты в JavaScript представляют собой коллекции пар "ключ-значение", где ключи - это строки,
//    а значения могут быть любого типа, включая другие объекты и массивы.
//    Объекты могут быть созданы с помощью литералов объектов или конструктора Object.
//    Объекты также могут быть использованы для создания пользовательских типов данных с помощью прототипов.

// 7. Массивы (Array) - это упорядоченные коллекции значений, которые могут быть любого типа
//    Массивы в JavaScript представляют собой объекты, которые хранят упорядоченные значения.

console.log("Hello, World!");

// создание переменной
// переменная - это именованная область памяти, которая может хранить данные
let dog = "Tusik"; // строка
dog = "Sharik"; // переопределение переменной
dog = 123; // можно хранить данные любого типа
dog = true; // можно хранить данные любого типа
let bird;
bird = "Kesha"; // переменная может быть объявлена без инициализации
bird = null; // переменная может быть инициализирована значением null
console.log(dog); // вывод в консоль

// создание константы
// константа - это именованная область памяти, которая не может быть изменена
const cat = "Murzik"; // строка
// cat = "Vaska"; // ошибка, константу нельзя переопределить
console.log(cat); // вывод в консоль

var age = 25; // устаревший способ объявления переменной
// var можно переопределить, но это не рекомендуется

let str1 = "13"; // использование двойных кавычек
let str2 = `World`; // использование шаблонных строк
let str3 = "Hello, World!"; // использование одинарных кавычек
let str4 = str1 + " ? " + str3; // конкатенация строк
console.log(str4); // вывод в консоль

console.log(str3.toUpperCase()); // преобразование строки в верхний регистр
console.log(str3.toLowerCase()); // преобразование строки в нижний регистр
console.log(str3.length); // длина строки
console.log(str3.indexOf("World")); // индекс подстроки в строке

// 2. Номера

let num1 = 10; // целое число
let num2 = 3.14; // число с плавающей точкой
let num3 = 0xff; // шестнадцатеричное число

// BigInt - это тип данных для работы с большими целыми числами
let bigInt = 1234567890123456789012345678901234567890n; // BigInt

// Boolean - это логический тип данных, который может принимать значения true или false
let isTrue = true; // логическое значение true
let isFalse = false; // логическое значение false

let isDrunk = true; // переменная, которая может быть true или false

// условные операторы
if (isDrunk) {
  console.log("Пьяный"); // если isDrunk равно true, то выводим "Пьяный"
} else {
  console.log("Трезвый"); // если isDrunk равно false, то выводим "Трезвый"
}

const result = isDrunk ? "Пьяный !!" : "Трезвый !"; // тернарный оператор
console.log(result); // выводим результат тернарного оператора

// undefined - это тип данных, который означает, что переменная не была инициализирована
let my_name; // переменная не инициализирована
console.log(my_name); // выводим значение переменной, которая не была инициал

// null - это тип данных, который означает, что переменная была инициализирована, но не содержит значения
let my_age = null; // переменная инициализирована, но не содержит значение
console.log(my_age); // выводим значение переменной, которая была инициализирована, но не содержит значение

// Символы - это тип данных, который представляет собой уникальный идентификатор
let mySymbol = Symbol("mySymbol"); // создание символа
console.log(mySymbol); // выводим значение символа

// Преобразование типов данных
// JavaScript автоматически преобразует типы данных при необходимости, но иногда нужно явно преобразовать

// строку в число или число в строку
let strNumber = "123"; // строка
let numFromStr = Number(strNumber); // преобразование строки в число
console.log(numFromStr); // выводим число, полученное из строки

// преобразование числа в строку
let num = 456; // число
let strFromNum = String(numFromStr); // преобразование числа в строку
console.log(strFromNum); // выводим строку, полученную из числа

// Примеры преобразования типов данны
const res = 9 + 12 + "5"; // "9" + "12" + "5" = "215" (строка)
const res2 = "5" + 9 + 12; // "9" + "5" = "59" + "12" = "5912"

// не явное преоброзование
const num5 = +"8"; //8
const sum = +"9" + +"10"; //19
console.log(sum);

// Явное преоброзование

const num6 = Number("117"); // 117
const num7 = Number("578734&%$");
console.log(num7);// NaN

// typeof показывает тип данных

console.log(typeof num6); // 

